name: CD

on:
    push:
        branches:
            - main

permissions:
    contents: write
    issues: write
    pull-requests: write

jobs:
    versioning:
        name: Versioning
        runs-on: ubuntu-latest
        outputs:
            new_release_version: ${{ steps.release.outputs.new_release_version }}
            new_release_published: ${{ steps.release.outputs.new_release_published }}
        steps:
            - name: Checkout
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
              with:
                  fetch-depth: 0

            - id: release
              name: Release
              uses: cycjimmy/semantic-release-action@16ca923e6ccbb50770c415a0ccd43709a8c5f7a4 # v4.2.2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Use version output
              run: echo "Released version is ${{ steps.release.outputs.new_release_version }}"

    release-binaries:
        name: Release Binaries to GitHub
        runs-on: ${{ matrix.os }}
        needs: versioning
        if: needs.versioning.outputs.new_release_published == 'true'
        strategy:
            fail-fast: false
            matrix:
                include:
                    - name: Linux x64
                      os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_name: zerv
                      asset_name: zerv-linux-x86_64
                    - name: Linux ARM64
                      os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      artifact_name: zerv
                      asset_name: zerv-linux-arm64
                    - name: macOS x64
                      os: macos-latest
                      target: x86_64-apple-darwin
                      artifact_name: zerv
                      asset_name: zerv-macos-x86_64
                    - name: macOS ARM64
                      os: macos-latest
                      target: aarch64-apple-darwin
                      artifact_name: zerv
                      asset_name: zerv-macos-arm64
                    - name: Windows x64
                      os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: zerv.exe
                      asset_name: zerv-windows-x86_64.exe
                    - name: Windows ARM64
                      os: windows-latest
                      target: aarch64-pc-windows-msvc
                      artifact_name: zerv.exe
                      asset_name: zerv-windows-arm64.exe
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

            - uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
              with:
                  toolchain: stable
                  targets: ${{ matrix.target }}

            - name: Install cross-compilation dependencies
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu
                  echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

            - name: Update Cargo.toml version
              run: |
                  echo "Updating version to ${{ needs.versioning.outputs.new_release_version }}"
                  if [[ "$RUNNER_OS" == "macOS" ]]; then
                      sed -i '' "s/^version = \".*\"/version = \"${{ needs.versioning.outputs.new_release_version }}\"/" Cargo.toml
                  else
                      sed -i "s/^version = \".*\"/version = \"${{ needs.versioning.outputs.new_release_version }}\"/" Cargo.toml
                  fi
              shell: bash

            - name: Build binary
              run: cargo build --release --target ${{ matrix.target }}

            - name: Upload binary to release
              uses: svenstaro/upload-release-action@81c65b7cd4de9b2570615ce3aad67a41de5b1a13 # v2.11.2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
                  asset_name: ${{ matrix.asset_name }}
                  tag: v${{ needs.versioning.outputs.new_release_version }}

    release-crates:
        name: Release to Crates.io
        runs-on: ubuntu-latest
        needs: [versioning, release-binaries]
        if: needs.versioning.outputs.new_release_published == 'true'
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

            - uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # stable
              with:
                  toolchain: stable

            - name: Update Cargo.toml version
              run: |
                  echo "Updating version to ${{ needs.versioning.outputs.new_release_version }}"
                  sed -i "s/^version = \".*\"/version = \"${{ needs.versioning.outputs.new_release_version }}\"/" Cargo.toml

            - name: Release to crates.io
              run: cargo publish --token ${{ secrets.CARGO_TOKEN }} --allow-dirty
